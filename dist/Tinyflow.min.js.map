{"version":3,"file":"Tinyflow.min.js","sources":["../lib/Tinyflow.js"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nexport const Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   */\n  extensions: new Map(),\n  /**\n   * Contains all created, non-disposed instances\n   */\n  instances: new Map(),\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, any>}\n   */\n  listeners: new WeakMap()\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners, instances } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_)\n\n/**\n * Gets a workflow instance by its id\n * @method\n * @param id {string}\n * @returns {Workflow}\n */\nTinyflow.get = id => instances.get(id)\n\n/**\n * Returns all non-disposed workflows of any state.\n * @method\n * @return {Workflow[]}\n */\nTinyflow.all = () => [...instances.values()]\n\n/**\n * Clears all extensions and instances. By default, all engines are shut down\n * and fire the end event.\n * @method\n * @param options {object=} options\n * @param options.extensions {boolean=} signal to clear all extensions\n */\nTinyflow.clear = (options = {}) => {\n  const ids = [...instances.keys()]\n  for (const instanceId of ids) {\n    const workflow = Tinyflow.get(instanceId)\n    workflow.cancel()\n    Tinyflow.dispose(instanceId)\n  }\n  if (options.extensions) {\n    extensions.clear()\n  }\n}\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n/**\n * Creates a new workflow instance by given workflow definitions.\n *\n * @param definition {object} the workflow definitions object\n * @returns {Workflow}\n */\nTinyflow.create = (definition) => {\n  const workflow = new Workflow(definition)\n  instances.set(workflow.id, workflow)\n  return workflow\n}\n\n/**\n * Fully disposes a workflow, including any event listener\n * to it, or its current step.\n * Once complete it will finally remove the workflow from\n * the internal instances list.\n * @param instanceId {string}\n * @param force {boolean=}\n */\nTinyflow.dispose = (instanceId, { force = false } = {}) => {\n  const workflow = instances.get(instanceId)\n  if (!workflow) {\n    throw new TinyflowError(`Workflow does not exist by id ${instanceId}`)\n  }\n  if (!force && workflow.state === 'active') {\n    throw new TinyflowError(`Cannot dispose active workflow \"${workflow.name}\"`, { instanceId })\n  }\n  if (workflow.current) {\n    workflow.current.off()\n    workflow.current = null\n  }\n  workflow.off()\n  listeners.delete(workflow)\n  instances.delete(instanceId)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((res, rej) => {\n  try {\n    res(fn(...args))\n  } catch (e) {\n    rej(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * returns the size\n   * @return {number}\n   */\n  count () {\n    return listeners.by(this, name).length\n  }\n\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    let list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    let list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    let index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n      .keys(target.custom)\n      .filter(key => extensions.has(key))\n      .map(name => {\n        const fn = extensions.get(name)\n        const value = target.custom[name]\n        return fn(value, { workflow, step })\n      }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n * @see {Tinyflow.create}\n */\nexport class Workflow extends Emitter {\n\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start active workflow`,\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using step.complete or step.cancel\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    let stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push({ name: step.name, data: { ...step.data }, at: new Date() })\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nexport class Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start a step in active state`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n\n"],"names":["Tinyflow","_","extensions","Map","instances","id","Math","random","toString","substring","listeners","WeakMap","by","emitter","name","has","set","get","extend","fn","all","values","clear","options","ids","keys","instanceId","cancel","dispose","use","handler","delete","call","create","definition","workflow","Workflow","force","TinyflowError","state","current","off","tick","t","setTimeout","Emitter","count","this","length","on","list","push","once","index","findIndex","f","splice","emit","data","reverse","i","args","Promise","res","rej","e","catch","error","source","Error","constructor","message","details","super","runExtensions","step","onSuccess","onError","target","Object","custom","filter","key","map","then","steps","history","stepExt","entries","forEach","val","scope","Array","isArray","includes","value","array","next","start","autoStep","indexOrName","stepId","autoOnEnd","stepDef","find","workflowId","Step","endStep","at","Date","complete","wf","update","assign"],"mappings":"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"}