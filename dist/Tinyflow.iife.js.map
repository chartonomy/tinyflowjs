{"version":3,"file":"Tinyflow.iife.js","sources":["../lib/Tinyflow.js"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nexport const Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   */\n  extensions: new Map(),\n  /**\n   * Contains all created, non-disposed instances\n   */\n  instances: new Map(),\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, any>}\n   */\n  listeners: new WeakMap()\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners, instances } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_)\n\n/**\n * Gets a workflow instance by its id\n * @method\n * @param id {string}\n * @returns {Workflow}\n */\nTinyflow.get = id => instances.get(id)\n\n/**\n * Returns all non-disposed workflows of any state.\n * @method\n * @return {Workflow[]}\n */\nTinyflow.all = () => [...instances.values()]\n\n/**\n * Clears all extensions and instances. By default, all engines are shut down\n * and fire the end event.\n * @method\n * @param options {object=} options\n * @param options.extensions {boolean=} signal to clear all extensions\n */\nTinyflow.clear = (options = {}) => {\n  const ids = [...instances.keys()]\n  for (const instanceId of ids) {\n    const workflow = Tinyflow.get(instanceId)\n    workflow.cancel()\n    Tinyflow.dispose(instanceId)\n  }\n  if (options.extensions) {\n    extensions.clear()\n  }\n}\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n/**\n * Creates a new workflow instance by given workflow definitions.\n *\n * @param definition {object} the workflow definitions object\n * @returns {Workflow}\n */\nTinyflow.create = (definition) => {\n  const workflow = new Workflow(definition)\n  instances.set(workflow.id, workflow)\n  return workflow\n}\n\n/**\n * Fully disposes a workflow, including any event listener\n * to it, or its current step.\n * Once complete it will finally remove the workflow from\n * the internal instances list.\n * @param instanceId {string}\n * @param force {boolean=}\n */\nTinyflow.dispose = (instanceId, { force = false } = {}) => {\n  const workflow = instances.get(instanceId)\n  if (!workflow) {\n    throw new TinyflowError(`Workflow does not exist by id ${instanceId}`)\n  }\n  if (!force && workflow.state === 'active') {\n    throw new TinyflowError(`Cannot dispose active workflow \"${workflow.name}\"`, { instanceId })\n  }\n  if (workflow.current) {\n    workflow.current.off()\n    workflow.current = null\n  }\n  workflow.off()\n  listeners.delete(workflow)\n  instances.delete(instanceId)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((res, rej) => {\n  try {\n    res(fn(...args))\n  } catch (e) {\n    rej(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * returns the size\n   * @return {number}\n   */\n  count () {\n    return listeners.by(this, name).length\n  }\n\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    let list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    let list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    let index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n      .keys(target.custom)\n      .filter(key => extensions.has(key))\n      .map(name => {\n        const fn = extensions.get(name)\n        const value = target.custom[name]\n        return fn(value, { workflow, step })\n      }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n * @see {Tinyflow.create}\n */\nexport class Workflow extends Emitter {\n\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start active workflow`,\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using step.complete or step.cancel\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    let stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push({ name: step.name, data: { ...step.data }, at: new Date() })\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nexport class Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start a step in active state`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n\n"],"names":["Tinyflow","_","extensions","Map","instances","id","Math","random","toString","substring","listeners","WeakMap","by","emitter","name","has","set","get","extend","fn","all","_toConsumableArray","values","clear","options","arguments","length","undefined","ids","keys","_iterator","_createForOfIteratorHelper","_step","s","n","done","instanceId","value","workflow","cancel","dispose","err","e","f","use","handler","call","create","definition","Workflow","_ref","_ref$force","force","TinyflowError","concat","state","current","off","tick","t","setTimeout","promisify","args","Promise","res","rej","apply","Emitter","_classCallCheck","_createClass","key","count","on","list","push","once","index","findIndex","splice","emit","data","_this","reverse","_loop","i","error","source","_Error","_inherits","_super","_createSuper","message","details","_this2","_wrapNativeSuper","Error","runExtensions","_ref2","step","onSuccess","onError","target","Object","custom","filter","map","then","_Emitter","_super2","_ref3","_this3","_ref3$steps","steps","_objectWithoutProperties","_excluded","history","stepExt","entries","forEach","_ref4","_ref5","_slicedToArray","val","_ref6","Array","isArray","_ref7","scope","includes","_ref8","array","_ref9","next","_objectSpread","start","_this4","_ref10","autoStep","indexOrName","_this5","_ref11","stepId","autoOnEnd","stepDef","find","_ref12","workflowId","Step","endStep","at","Date","complete","_Emitter2","_super3","_ref13","_this6","_ref13$data","_excluded2","_this7","wf","update","assign"],"mappings":"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"}