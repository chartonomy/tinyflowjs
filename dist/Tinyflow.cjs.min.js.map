{"version":3,"file":"Tinyflow.cjs.min.js","sources":["../lib/Tinyflow.js"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nexport const Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   */\n  extensions: new Map(),\n  /**\n   * Contains all created, non-disposed instances\n   */\n  instances: new Map(),\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, any>}\n   */\n  listeners: new WeakMap()\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners, instances } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_)\n\n/**\n * Gets a workflow instance by its id\n * @method\n * @param id {string}\n * @returns {Workflow}\n */\nTinyflow.get = id => instances.get(id)\n\n/**\n * Returns all non-disposed workflows of any state.\n * @method\n * @return {Workflow[]}\n */\nTinyflow.all = () => [...instances.values()]\n\n/**\n * Clears all extensions and instances. By default, all engines are shut down\n * and fire the end event.\n * @method\n * @param options {object=} options\n * @param options.extensions {boolean=} signal to clear all extensions\n */\nTinyflow.clear = (options = {}) => {\n  const ids = [...instances.keys()]\n  for (const instanceId of ids) {\n    const workflow = Tinyflow.get(instanceId)\n    workflow.cancel()\n    Tinyflow.dispose(instanceId)\n  }\n  if (options.extensions) {\n    extensions.clear()\n  }\n}\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n/**\n * Creates a new workflow instance by given workflow definitions.\n *\n * @param definition {object} the workflow definitions object\n * @returns {Workflow}\n */\nTinyflow.create = (definition) => {\n  const workflow = new Workflow(definition)\n  instances.set(workflow.id, workflow)\n  return workflow\n}\n\n/**\n * Fully disposes a workflow, including any event listener\n * to it, or its current step.\n * Once complete it will finally remove the workflow from\n * the internal instances list.\n * @param instanceId {string}\n * @param force {boolean=}\n */\nTinyflow.dispose = (instanceId, { force = false } = {}) => {\n  const workflow = instances.get(instanceId)\n  if (!workflow) {\n    throw new TinyflowError(`Workflow does not exist by id ${instanceId}`)\n  }\n  if (!force && workflow.state === 'active') {\n    throw new TinyflowError(`Cannot dispose active workflow \"${workflow.name}\"`, { instanceId })\n  }\n  if (workflow.current) {\n    workflow.current.off()\n    workflow.current = null\n  }\n  workflow.off()\n  listeners.delete(workflow)\n  instances.delete(instanceId)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((res, rej) => {\n  try {\n    res(fn(...args))\n  } catch (e) {\n    rej(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * returns the size\n   * @return {number}\n   */\n  count () {\n    return listeners.by(this, name).length\n  }\n\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    let list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    let list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    let index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n      .keys(target.custom)\n      .filter(key => extensions.has(key))\n      .map(name => {\n        const fn = extensions.get(name)\n        const value = target.custom[name]\n        return fn(value, { workflow, step })\n      }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n * @see {Tinyflow.create}\n */\nexport class Workflow extends Emitter {\n\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start active workflow`,\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using step.complete or step.cancel\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    let stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push({ name: step.name, data: { ...step.data }, at: new Date() })\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nexport class Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start a step in active state`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_excluded","_excluded2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","key","value","_toPropertyKey","configurable","writable","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","l","n","u","a","f","call","next","done","_iterableToArrayLimit","_unsupportedIterableToArray","TypeError","_nonIterableRest","_objectWithoutProperties","source","excluded","target","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_inherits","subClass","superClass","create","_setPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","_getPrototypeOf","NewTarget","this","Reflect","construct","self","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_wrapNativeSuper","Class","_cache","Map","undefined","_isNativeFunction","fn","Function","toString","has","get","set","Wrapper","_construct","Parent","args","bind","Constructor","instance","sham","Proxy","Boolean","valueOf","p","setPrototypeOf","__proto__","getPrototypeOf","_classCallCheck","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_toConsumableArray","_arrayWithoutHoles","_arrayLikeToArray","iter","from","_iterableToArray","_nonIterableSpread","minLen","slice","name","test","len","arr2","Tinyflow","_","extensions","instances","id","Math","random","substring","listeners","WeakMap","by","emitter","extend","all","values","clear","_step","options","_iterator","allowArrayLike","it","F","s","_e","normalCompletion","err","didErr","step","_e2","_createForOfIteratorHelper","instanceId","cancel","dispose","use","handler","definition","workflow","Workflow","_ref$force","force","TinyflowError","concat","state","current","off","tick","setTimeout","Emitter","list","once","on","index","findIndex","splice","data","_this","reverse","_loop","Promise","rej","emit","error","_Error","Error","_super","message","details","_this2","runExtensions","_ref2","onSuccess","onError","custom","map","then","_Emitter","_super2","_ref3","_this3","_ref3$steps","steps","history","stepExt","entries","_ref4","_ref5","val","_ref7","scope","includes","_ref8","array","_ref9","_this4","autoStep","indexOrName","_this5","_ref11","stepId","autoOnEnd","stepDef","find","_ref12","workflowId","Step","endStep","at","Date","complete","start","_Emitter2","_super3","_ref13","_this6","_ref13$data","_this7","wf","assign","exports"],"mappings":"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"}